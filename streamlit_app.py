from __future__ import annotations

import tempfile
from pathlib import Path
from typing import List
import shutil

import streamlit as st
import zipfile

from send_mail_merge import run_merge


def save_upload(file, suffix: str) -> Path:
    """Persist an uploaded file to a temporary path and return the path."""
    with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp:
        tmp.write(file.read())
        return Path(tmp.name)


def _is_safe_relative_path(base_dir: Path, candidate: Path) -> bool:
    """Return True if candidate resolves under base_dir; False otherwise."""
    try:
        return candidate.resolve().is_relative_to(base_dir.resolve())  # type: ignore[attr-defined]
    except AttributeError:
        # Python < 3.9 fallback
        try:
            candidate.resolve().relative_to(base_dir.resolve())
            return True
        except Exception:
            return False
    except Exception:
        return False


def _human_size(num_bytes: int) -> str:
    units = ["B", "KB", "MB", "GB", "TB"]
    size = float(num_bytes)
    unit_idx = 0
    while size >= 1024.0 and unit_idx < len(units) - 1:
        size /= 1024.0
        unit_idx += 1
    if unit_idx == 0:
        return f"{int(size)} {units[unit_idx]}"
    return f"{size:.1f} {units[unit_idx]}"


def render_file_manager(root_dir: Path) -> None:
    st.header("Qu·∫£n l√Ω t·ªáp & th∆∞ m·ª•c")
    st.caption("Thao t√°c trong ph·∫°m vi th∆∞ m·ª•c d·ª± √°n ƒë·ªÉ an to√†n.")

    # Session state
    if "fm_root" not in st.session_state:
        st.session_state["fm_root"] = str(root_dir.resolve())
    if "fm_cwd" not in st.session_state:
        st.session_state["fm_cwd"] = st.session_state["fm_root"]

    project_base = root_dir.resolve()
    fm_root = Path(st.session_state["fm_root"]).resolve()
    if not _is_safe_relative_path(project_base, fm_root):
        fm_root = project_base
        st.session_state["fm_root"] = str(fm_root)
        st.session_state["fm_cwd"] = str(fm_root)

    try:
        fm_root.mkdir(parents=True, exist_ok=True)
    except Exception as exc:
        st.error(f"Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c g·ªëc: {exc}")
        return

    fm_cwd = Path(st.session_state["fm_cwd"]).resolve()
    if not _is_safe_relative_path(fm_root, fm_cwd):
        fm_cwd = fm_root
        st.session_state["fm_cwd"] = str(fm_cwd)

    cols = st.columns([5, 2, 2, 3])
    with cols[0]:
        st.write(f"ƒêang ·ªü: {fm_cwd}")
    with cols[1]:
        if st.button("L√™n tr√™n", disabled=fm_cwd == fm_root):
            parent = fm_cwd.parent
            if _is_safe_relative_path(fm_root, parent):
                st.session_state["fm_cwd"] = str(parent)
                st.experimental_rerun()
    with cols[2]:
        if st.button("L√†m m·ªõi"):
            st.experimental_rerun()
    with cols[3]:
        allow_delete = st.checkbox("B·∫≠t xo√°", value=False)

    # Create folder form
    with st.form("fm_create_folder", clear_on_submit=True):
        new_folder = st.text_input("T·∫°o th∆∞ m·ª•c m·ªõi", value="")
        submit_folder = st.form_submit_button("T·∫°o th∆∞ m·ª•c")
        if submit_folder:
            name = new_folder.strip().strip("/\\")
            if not name:
                st.warning("T√™n th∆∞ m·ª•c kh√¥ng ƒë∆∞·ª£c r·ªóng.")
            else:
                target = (fm_cwd / name)
                if not _is_safe_relative_path(fm_root, target):
                    st.error("ƒê∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá.")
                else:
                    try:
                        target.mkdir(exist_ok=False)
                        st.success(f"ƒê√£ t·∫°o: {target.name}")
                        st.experimental_rerun()
                    except FileExistsError:
                        st.warning("Th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i.")
                    except Exception as exc:
                        st.error(f"Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c: {exc}")

    # Upload files
    uploads = st.file_uploader("Upload file v√†o th∆∞ m·ª•c hi·ªán t·∫°i", accept_multiple_files=True)
    if uploads:
        if st.button("L∆∞u c√°c file upload"):
            saved = 0
            for uf in uploads:
                dest = fm_cwd / Path(uf.name).name
                if not _is_safe_relative_path(fm_root, dest):
                    st.error(f"B·ªè qua t·ªáp kh√¥ng h·ª£p l·ªá: {uf.name}")
                    continue
                try:
                    with open(dest, "wb") as f:
                        f.write(uf.getbuffer())
                    saved += 1
                except Exception as exc:
                    st.error(f"Kh√¥ng th·ªÉ l∆∞u {uf.name}: {exc}")
            st.success(f"ƒê√£ l∆∞u {saved} t·ªáp v√†o {fm_cwd}")
            st.experimental_rerun()

    st.divider()

    # List entries
    try:
        entries = list(fm_cwd.iterdir())
    except Exception as exc:
        st.error(f"Kh√¥ng th·ªÉ li·ªát k√™ th∆∞ m·ª•c: {exc}")
        return
    entries.sort(key=lambda p: (p.is_file(), p.name.lower()))

    for e in entries:
        icon = "üìÅ" if e.is_dir() else "üìÑ"
        row = st.columns([6, 2, 2, 2])
        with row[0]:
            st.write(f"{icon} {e.name}")
        with row[1]:
            try:
                size = _human_size(e.stat().st_size) if e.is_file() else "‚Äî"
            except Exception:
                size = "‚Äî"
            st.write(size)
        with row[2]:
            if e.is_dir():
                if st.button("M·ªü", key=f"open_{e.name}"):
                    if _is_safe_relative_path(fm_root, e):
                        st.session_state["fm_cwd"] = str(e.resolve())
                        st.experimental_rerun()
            else:
                try:
                    data = e.read_bytes()
                except Exception:
                    data = b""
                st.download_button("T·∫£i", data=data, file_name=e.name, mime="application/octet-stream", key=f"dl_{e.name}")
        with row[3]:
            if e.is_dir():
                if st.button("Xo√°", key=f"del_{e.name}", disabled=not allow_delete):
                    if _is_safe_relative_path(fm_root, e):
                        try:
                            shutil.rmtree(e)
                            st.success(f"ƒê√£ xo√° th∆∞ m·ª•c: {e.name}")
                            st.experimental_rerun()
                        except Exception as exc:
                            st.error(f"Kh√¥ng th·ªÉ xo√° th∆∞ m·ª•c: {exc}")
            else:
                if st.button("Xo√°", key=f"delf_{e.name}", disabled=not allow_delete):
                    if _is_safe_relative_path(fm_root, e):
                        try:
                            e.unlink(missing_ok=False)
                            st.success(f"ƒê√£ xo√° t·ªáp: {e.name}")
                            st.experimental_rerun()
                        except Exception as exc:
                            st.error(f"Kh√¥ng th·ªÉ xo√° t·ªáp: {exc}")

def main() -> None:
    st.set_page_config(page_title="Bookmedi Mail Merge", layout="centered")
    st.title("Bookmedi Mail Merge")
    st.caption("G·ª≠i email k√®m PDF theo danh s√°ch")

    base = Path(__file__).parent
    upload_dir = base / "uploads"
    upload_dir.mkdir(parents=True, exist_ok=True)
    default_recipients = base / "recipients.xlsx"
    default_template = base / "template.html"

    tab_send, tab_files = st.tabs(["G·ª≠i Email", "Qu·∫£n l√Ω t·ªáp & th∆∞ m·ª•c"])

    with tab_send:
        # Sidebar: SMTP settings
        st.sidebar.header("SMTP Settings")
        smtp_provider = st.sidebar.selectbox(
            "Provider",
            ["Gmail (STARTTLS)", "Outlook (STARTTLS)", "Custom"],
            index=0,
        )

        host_default = "smtp.gmail.com" if smtp_provider == "Gmail (STARTTLS)" else (
            "smtp.office365.com" if smtp_provider == "Outlook (STARTTLS)" else "smtp.gmail.com"
        )

        smtp_host = st.sidebar.text_input("SMTP Host", value=host_default)
        smtp_port = st.sidebar.number_input("SMTP Port", min_value=1, max_value=65535, value=587)
        use_ssl = st.sidebar.checkbox("Use SSL (SMTPS)", value=False)
        smtp_user = st.sidebar.text_input("SMTP User (email)", value="")
        smtp_pass = st.sidebar.text_input("SMTP Password/App Password", type="password", value="")
        from_name = st.sidebar.text_input("From Name", value="Bookmedi")
        default_subject = st.sidebar.text_input(
            "Default Subject",
            value="K·∫øt qu·∫£ b√†i thi Versant level 1 - {{Ten}}",
        )
        dry_run = st.sidebar.checkbox("Dry-run (kh√¥ng g·ª≠i th·∫≠t)", value=True)
        rate_delay = st.sidebar.slider("Delay gi·ªØa m·ªói email (gi√¢y)", 0.0, 10.0, 1.5, 0.5)

        # Main form
        st.subheader("Ch·ªçn t·ªáp")
        up_recipients = st.file_uploader("Recipients (.xlsx/.csv)", type=["xlsx", "xls", "csv"], help="B·∫Øt bu·ªôc")
        up_template = st.file_uploader("Template HTML", type=["html"], help="M·∫∑c ƒë·ªãnh d√πng template.html trong d·ª± √°n n·∫øu ƒë·ªÉ tr·ªëng")

        st.subheader("File ƒë√≠nh k√®m")
        st.caption("N·∫øu recipients ch·ªâ ch·ª©a t√™n file (v√≠ d·ª•: A.pdf), h√£y upload th∆∞ m·ª•c ZIP ch·ª©a c√°c PDF ho·∫∑c ch·ªçn th∆∞ m·ª•c g·ªëc.")
        zip_upload = st.file_uploader("Upload ZIP ch·ª©a c√°c PDF (t√πy ch·ªçn)", type=["zip"], accept_multiple_files=False)
        pdf_uploads = st.file_uploader("Upload nhi·ªÅu PDF (t√πy ch·ªçn)", type=["pdf"], accept_multiple_files=True)
        base_dir_text = st.text_input("Base directory (t√πy ch·ªçn)", value=str(upload_dir))

        # Or use defaults from project folder
        st.write(":small_blue_diamond: N·∫øu kh√¥ng upload, ·ª©ng d·ª•ng s·∫Ω d√πng:")
        st.code(str(default_recipients), language="text")
        st.code(str(default_template), language="text")

        log_area = st.empty()
        start = st.button("G·ª≠i Email")

        if start:
            try:
                # Persist uploaded PDFs/ZIP to server under uploads/
                saved_files: List[Path] = []
                if pdf_uploads:
                    for up in pdf_uploads:
                        dest = upload_dir / Path(up.name).name
                        with open(dest, "wb") as f:
                            f.write(up.getbuffer())
                        saved_files.append(dest)

                if zip_upload is not None:
                    tmp_zip = save_upload(zip_upload, suffix=".zip")
                    try:
                        with zipfile.ZipFile(tmp_zip, "r") as zf:
                            zf.extractall(upload_dir)
                    finally:
                        try:
                            tmp_zip.unlink(missing_ok=True)  # type: ignore[arg-type]
                        except Exception:
                            pass

                if up_recipients is not None:
                    recipients_path = save_upload(up_recipients, suffix=Path(up_recipients.name).suffix)
                else:
                    if not default_recipients.exists():
                        st.error("Ch∆∞a ch·ªçn recipients v√† kh√¥ng t√¨m th·∫•y recipients.xlsx m·∫∑c ƒë·ªãnh.")
                        return
                    recipients_path = default_recipients

                if up_template is not None:
                    template_path = save_upload(up_template, suffix=".html")
                else:
                    if not default_template.exists():
                        st.error("Ch∆∞a ch·ªçn template v√† kh√¥ng t√¨m th·∫•y template.html m·∫∑c ƒë·ªãnh.")
                        return
                    template_path = default_template

                # Progress logs
                session_logs: List[str] = []

                def cb(line: str) -> None:
                    session_logs.append(line)
                    log_area.text("\n".join(session_logs))

                if saved_files:
                    cb(f"ƒê√£ l∆∞u {len(saved_files)} PDF v√†o: {upload_dir}")
                elif zip_upload is not None:
                    cb(f"ƒê√£ gi·∫£i n√©n ZIP v√†o: {upload_dir}")

                summary = run_merge(
                    recipients=str(recipients_path),
                    template=str(template_path),
                    smtp_host=smtp_host,
                    smtp_port=int(smtp_port),
                    smtp_user=smtp_user,
                    smtp_pass=smtp_pass,
                    from_name=from_name,
                    default_subject=default_subject,
                    rate_delay=float(rate_delay),
                    dry_run=bool(dry_run),
                    use_ssl=bool(use_ssl),
                    base_dir=(base_dir_text or str(upload_dir)),
                    progress_callback=cb,
                )

                st.success(f"Ho√†n t·∫•t. Sent={summary['sent']}, Failed={summary['failed']}")
                if summary["errors"]:
                    with st.expander("Xem l·ªói"):
                        for em, err in summary["errors"]:
                            st.write(f"- {em}: {err}")
            except Exception as exc:
                st.error(str(exc))

    with tab_files:
        render_file_manager(base)


if __name__ == "__main__":
    main()


