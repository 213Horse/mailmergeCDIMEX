name: Deploy to VPS (Docker + Nginx)
on:
  push:
    branches:
      - main
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}
      VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
      PROD_ENV_FILE: ${{ secrets.PROD_ENV_FILE }}
      DOMAIN: ${{ secrets.DOMAIN }}
      HOST_PORT: ${{ secrets.HOST_PORT }}
      CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.GHCR_USERNAME }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Set image tags
        id: meta
        run: |
          REPO_PATH=${REGISTRY}/${GHCR_USERNAME}/${IMAGE_NAME}
          echo "repo_path=${REPO_PATH}" >> $GITHUB_OUTPUT
          echo "tag_sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "tag_latest=latest" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        run: |
          docker build -t "${{ steps.meta.outputs.repo_path }}:${{ steps.meta.outputs.tag_sha }}" -t "${{ steps.meta.outputs.repo_path }}:${{ steps.meta.outputs.tag_latest }}" .
          docker push "${{ steps.meta.outputs.repo_path }}:${{ steps.meta.outputs.tag_sha }}"
          docker push "${{ steps.meta.outputs.repo_path }}:${{ steps.meta.outputs.tag_latest }}"

      - name: Prepare SSH key
        run: |
          echo "${VPS_SSH_KEY}" > vps_key
          chmod 600 vps_key

      - name: Deploy on VPS over SSH
        env:
          REPO_PATH: ${{ steps.meta.outputs.repo_path }}
          TAG_SHA: ${{ steps.meta.outputs.tag_sha }}
        run: |
          ssh -i vps_key -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} 'bash -s' <<'EOSSH'
          set -euo pipefail

          # ---- Settings (with sane defaults if missing) ----
          IMAGE_NAME="${IMAGE_NAME}"
          REPO_PATH="${REPO_PATH}"
          TAG_SHA="${TAG_SHA}"
          APP_DIR="/opt/${IMAGE_NAME}"
          HOST_PORT="${HOST_PORT:-9000}"
          CONTAINER_PORT="${CONTAINER_PORT:-7001}"
          DOMAIN_NAME="${DOMAIN:-example.com}"

          sudo mkdir -p "$APP_DIR"

          # Write .env from secret
          if [ -n "${PROD_ENV_FILE}" ]; then
            echo "${PROD_ENV_FILE}" | sudo tee "$APP_DIR/.env" > /dev/null
          else
            sudo touch "$APP_DIR/.env"
          fi

          # Install docker compose plugin if missing
          if ! command -v docker >/dev/null; then
            echo "Docker is required on the server. Please install Docker and rerun." >&2
            exit 1
          fi

          if ! docker compose version >/dev/null 2>&1; then
            # Try to install compose plugin for Debian/Ubuntu
            if [ -f /etc/os-release ]; then
              . /etc/os-release
              if [ "${ID}" = "ubuntu" ] || [ "${ID}" = "debian" ]; then
                sudo apt-get update -y
                sudo apt-get install -y docker-compose-plugin
              fi
            fi
          fi

          # Docker login to GHCR to pull private images
          echo "${GHCR_TOKEN}" | sudo docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin

          # Write docker-compose.yml
          sudo tee "$APP_DIR/docker-compose.yml" > /dev/null <<YAML
          version: "3.8"
          services:
            app:
              image: ${REPO_PATH}:${TAG_SHA}
              container_name: ${IMAGE_NAME}
              restart: unless-stopped
              env_file:
                - .env
              ports:
                - "127.0.0.1:${HOST_PORT}:${CONTAINER_PORT}"
              # If your app needs a working directory or command, set them via env or modify here
          YAML

          # Pull and start the app
          sudo docker compose -f "$APP_DIR/docker-compose.yml" pull app
          sudo docker compose -f "$APP_DIR/docker-compose.yml" up -d --remove-orphans

          # ---- Nginx reverse proxy ----
          if command -v nginx >/dev/null 2>&1; then
            SITES_AVAILABLE="/etc/nginx/sites-available/${IMAGE_NAME}.conf"
            SITES_ENABLED="/etc/nginx/sites-enabled/${IMAGE_NAME}.conf"
            sudo tee "$SITES_AVAILABLE" > /dev/null <<NGINX
            server {
              listen 80;
              server_name ${DOMAIN_NAME};

              location / {
                proxy_pass http://127.0.0.1:${HOST_PORT};
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_read_timeout 300;
              }
            }
            NGINX

            if [ ! -e "$SITES_ENABLED" ]; then
              sudo ln -s "$SITES_AVAILABLE" "$SITES_ENABLED"
            fi
            sudo nginx -t
            sudo systemctl reload nginx
          else
            echo "Nginx not installed; skipping Nginx configuration." >&2
          fi
          EOSSH

      - name: Cleanup
        if: always()
        run: rm -f vps_key
